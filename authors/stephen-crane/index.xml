<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Immunant, Inc</title>
    <link>/authors/stephen-crane/</link>
    <description>Recent content on Immunant, Inc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Immunant, Inc.</copyright>
    <lastBuildDate>Fri, 05 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/authors/stephen-crane/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In-process Sandboxing with Memory Protection Keys</title>
      <link>/blog/2024/04/sandboxing/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 +0000</pubDate>
      <guid>/blog/2024/04/sandboxing/</guid>
      <description>Modern software applications contain many distinct smaller components, such as libraries or plugins, that are often written by third-parties. Developers typically donâ€™t have the resources to exhaustively review and scrutinize third-party source code, leaving application integrators and operational teams with little visibility into the security and correctness of this code. These libraries provide specialized functionality, and often do not need access to the entire application, but the status quo is that an application is an amalgamation of all this code into one process with all components having equal access to all data in the application.</description>
    </item>
    <item>
      <title>Translating Quake 3 into Rust</title>
      <link>/blog/2020/01/quake3/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/blog/2020/01/quake3/</guid>
      <description>The Rust-loving team at Immunant has been hard at work on C2Rust, a migration framework that takes the drudgery out of migrating to Rust. Our goal is to make safety improvements to the translated Rust automatically where we can, and help the programmer do the same where we cannot. First, however, we have to build a rock-solid translator that gets people up and running in Rust. Testing on small CLI programs gets old eventually, so we decided to try translating Quake 3 into Rust.</description>
    </item>
    <item>
      <title>Source Code Linking: Merging C Headers into Rust Modules</title>
      <link>/blog/2019/12/header_merging/</link>
      <pubDate>Wed, 18 Dec 2019 16:00:00 -0800</pubDate>
      <guid>/blog/2019/12/header_merging/</guid>
      <description>Producing readable, idiomatic Rust code is a major goal of C2Rust, our project to accelerate migration of C code into Rust. One hurdle we faced is the mismatch between C headers and the Rust module system. C and Rust are similar in many ways: they&amp;rsquo;re both performance oriented languages with explicit memory management and full control over every aspect of the system. Rust&amp;rsquo;s module system is a huge improvement over C header files.</description>
    </item>
    <item>
      <title>Rust 2020: Lessons learned by transpiling C to Rust</title>
      <link>/blog/2019/11/rust2020/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/blog/2019/11/rust2020/</guid>
      <description>The C2Rust project is all about translating C code into an equivalent, drop-in ABI-compatible Rust implementation. (Read our C2Rust introductory blog post here.) Along the way we&amp;rsquo;ve uncovered some dark corners of C as it&amp;rsquo;s written in practice, and found places where Rust can&amp;rsquo;t quite replicate the same code with the same ABI. This is the story of those dark corners and the areas we think Rust needs to improve to be fully FFI compatible with C.</description>
    </item>
  </channel>
</rss>
